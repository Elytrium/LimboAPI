plugins() {
  id("java")

  id("org.ajoberstar.grgit").version("5.3.0")
  /*

  id("com.diffplug.spotless").version("6.25.0").apply(false)
  id("com.github.spotbugs").version("6.0.26").apply(false)

  */
  id("com.gradleup.shadow").version("8.3.5")
}

this.group = "net.elytrium"
this.version = "1.2.0-SNAPSHOT"

if (this.version.endsWith("-SNAPSHOT")) {
  this.version += "+${grgit.head().abbreviatedId}"
}

subprojects() {
  apply(plugin: "java-library")
  /*

  apply(plugin: "com.diffplug.spotless")
  apply(plugin: "checkstyle")
  apply(plugin: "com.github.spotbugs")

  */
  tasks.withType(JavaCompile).configureEach() {
    options.setEncoding("UTF-8")
  }

  java() {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17
  }

  configurations() {
    api.extendsFrom(shadowApi)
  }

  repositories() {
    mavenCentral()

    maven() {
      name = "elytrium"
      url = "https://maven.elytrium.net/repo/"
    }

    maven() {
      name = "papermc"
      url = "https://repo.papermc.io/repository/maven-public/"
    }
  }
  /*

  spotless() {
    java() {
      licenseHeaderFile(rootProject.file("HEADER.txt"))
    }
  }

  checkstyle() {
    toolVersion = "10.20.1"

    configFile = rootProject.file(".config/checkstyle/checkstyle.xml")
    maxErrors = 0
    maxWarnings = 0
  }

  spotbugsMain() {
    excludeFilter.set(rootProject.file(".config/spotbugs/suppressions.xml"))
    reports() {
      html() {
        required = true
        outputLocation.value(layout.buildDirectory.file("reports/spotbugs/spotbugs.html"))
        stylesheet = "fancy-hist.xsl"
      }
    }
  }
  */
}

gradle.projectsEvaluated() {
  shadowJar() {
    archiveClassifier = null

    //enableRelocation = true
    //relocationPrefix = "${this.group}.${this.rootProject.getName()}.3rdparty"
    // TODO remove
    relocate("org.bstats", "net.elytrium.limboapi.thirdparty.org.bstats")
    relocate("net.elytrium.fastprepare", "net.elytrium.limboapi.thirdparty.fastprepare")
    relocate("net.elytrium.commons.velocity", "net.elytrium.limboapi.thirdparty.commons.velocity")
    relocate("net.elytrium.commons.kyori", "net.elytrium.limboapi.thirdparty.commons.kyori")
    relocate("net.elytrium.commons.config", "net.elytrium.limboapi.thirdparty.commons.config")

    configurations = []
    this.subprojects.forEach(project -> {
      configurations.add(project.configurations.shadowApi)
      from(project.sourceSets.main.output)
    })
  }

  assemble.dependsOn(shadowJar)
}
